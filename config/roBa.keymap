#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W             &kp E         &kp R               &kp T                                                 &kp Y        &kp U  &kp I      &kp O       &kp P
&kp A           &kp S             &kp D         &kp F               &kp G           &kp LS(LG(S))      &kp TAB            &kp H        &kp J  &kp K      &kp L       &kp MINUS
&kp Z           &kp X             &kp C         &kp V               &kp B           &kp LANG6          &kp LANG_HIRAGANA  &kp N        &kp M  &kp COMMA  &kp PERIOD  &kp SLASH
&kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_WIN  &lt 1 LEFT_COMMAND  &lt 2 LEFT_ALT  &lt 3 SPACE        &lt 4 BACKSPACE    &lt 5 ENTER                                &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        simbol {
            bindings = <
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN       &kp HASH              &kp PERCENT                                &kp CARET        &kp AMPERSAND     &kp TILDE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp CARET  &kp AMPERSAND    &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans      &trans  &kp EXCLAMATION  &kp AT_SIGN       &kp HASH   &kp DOLLAR            &trans
&kp MINUS  &kp EQUAL        &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp BACKSLASH          &trans      &trans  &kp LESS_THAN    &kp GREATER_THAN  &trans     &trans                &trans
&trans     &trans           &trans            &trans                &trans                 &trans      &trans  &trans                                                              &trans
            >;
        };

        arrow+mouse {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans    &trans    &trans    &trans    &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &mkp MB1  &mkp MB2  &mkp MB3  &mkp MB4  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &mkp MB4  &mkp MB5  &trans    &trans    &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                  &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        shortcut+function+num {
            bindings = <
&kp LA(LS(TAB))  &kp F9  &kp F10  &kp F11  &kp F12                      &kp N7        &kp NUMBER_8  &kp NUMBER_9  &trans  &trans
&kp LA(TAB)      &kp F5  &kp F6   &kp F7   &kp F8   &trans      &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans  &trans
&kp LS(LC(TAB))  &kp F1  &kp F2   &kp F3   &kp F4   &trans      &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans
&kp LC(TAB)      &trans  &trans   &trans   &trans   &trans      &trans  &kp NUMBER_0                                      &trans
            >;
        };

        BT_select {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3     &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans          &trans        &trans          &trans           &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                         &bt BT_CLR_ALL
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
